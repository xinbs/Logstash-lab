input {
  http {
    port => 15515
    additional_codecs => { "application/json" => "json" }
    # text/plain 会落在 [message] 字段
  }
}

# 自动设置 metadata type 为固定值 "test" (为了兼容现有逻辑)
filter {
  mutate {
    add_field => { "[@metadata][type]" => "test" }
  }
}

### !!! Web 会把下面 filter {...} 整块替换 !!!
filter {
    if "test" == [@metadata][type] {
        # Parse syslog RFC5424 format with bomgar specific content
        grok {
        id => "grok_bomgar_syslog"
        match => {
        "message" => "<%{POSINT:syslog_pri}>%{POSINT:syslog_ver} %{DATA:syslog_timestamp} %{IPORHOST:syslog_host} %{WORD:syslog_program} %{POSINT:syslog_pid} - \[meta sequenceId=\\\"%{DATA:sequence_id}\\\"\] %{GREEDYDATA:bomgar_content}"
        }
        }

        # Parse bomgar specific fields using grok
        grok {
        id => "grok_bomgar_content"
        match => {
        "bomgar_content" => "%{POSINT:session_id}:%{INT:session_time_min}:%{INT:session_time_sec}:event=%{DATA:event_action};site=%{DATA:site};target=%{DATA:target};when=%{POSINT:event_when};who=%{DATA:who};who_ip=%{IP:who_ip}"
        }
        }

        # Parse the timestamp
        date {
        id => "date_bomgar"
        match => [ "syslog_timestamp", "yyyy-MM-dd'T'HH:mm:ssZ", "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
        target => "@timestamp"
        }

        # Convert syslog priority to facility and severity
        ruby {
        id => "ruby_syslog_priority"
        code => "
        pri = event.get('syslog_pri').to_i
        event.set('syslog_facility', pri >> 3)
        event.set('syslog_severity', pri & 7)
        "
        }

        # Convert epoch timestamp to readable format
        if [event_when] {
        date {
        id => "date_event_when"
        match => [ "event_when", "UNIX" ]
        target => "event_timestamp"
        }
        }

        # Clean up who field to extract username
        if [who] {
        grok {
        id => "grok_who_cleanup"
        match => {
        "who" => "(?<account_type>[^\s\(]+)(?:\s+\((?<username>[^\)]+)\))?(?:\s+using\s+(?<auth_method>.+))?"
        }
        }
        }

        mutate {
        id => "mutate_bomgar"
        add_field => {
        "__source" => "bomgar"
        "log_type" => "bomgar_session"
        }
        # Convert numeric fields
        convert => {
        "syslog_pri" => "integer"
        "syslog_ver" => "integer"
        "syslog_pid" => "integer"
        "syslog_facility" => "integer"
        "syslog_severity" => "integer"
        }

        }
    }
}

output {
  file {
    path => "/data/out/events.ndjson"
    codec => json_lines
  }
  stdout { codec => rubydebug }
}